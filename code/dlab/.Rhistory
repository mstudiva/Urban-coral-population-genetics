#[-c(11,14,22,32-34,54,59,72),] # list of bams files and their populations (tech reps removed)
ma = as.matrix(read.table("../../data/ofav/ofavNoClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(ma) = list(bams[,2],bams[,2])
bams = read.csv("../../data/ofav/ofavMetadata.csv")
bams = read.csv("../../data/ofav/ofavMetadata.csv")
ma = as.matrix(read.table("../../data/ofav/ofavNoClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(ma) = list(bams[,2],bams[,2])
Hc = hclust(as.dist(ma),"ave")
Pops = bams$region
Site = bams$site
bams = read.csv("../../data/ofav/ofavMetadata.csv")[-c(11,14,22,32:34,54,59,72),] # list of bams files and their populations (tech reps removed)
ma = as.matrix(read.table("../../data/ofav/ofavNoClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(ma) = list(bams[,2],bams[,2])
Hc = hclust(as.dist(ma),"ave")
Pops = bams$region
Site = bams$site
Dend = ma %>% as.dist() %>% hclust(.,"ave") %>% as.dendrogram()
DData = Dend %>% dendro_data()
# Making the branches hang shorter so we can easily see clonal groups
DData$segments$yend2 = DData$segments$yend
for(i in 1:nrow(DData$segments)) {
if (DData$segments$yend2[i] == 0) {
DData$segments$yend2[i] = (DData$segments$y[i] - 0.01)}}
DendPoints = DData$labels
DendPoints$region = Pops[order.dendrogram(Dend)]
DendPoints$site=Site[order.dendrogram(Dend)]
rownames(DendPoints) = DendPoints$label
DendPoints$region = as.factor(DendPoints$region)
DendPoints$site = as.factor(DendPoints$site)
# Making points at the leaves to place symbols for regions
point = as.vector(NA)
for(i in 1:nrow(DData$segments)) {
if (DData$segments$yend[i] == 0) {
point[i] = DData$segments$y[i] - 0.01
} else {
point[i] = NA}}
DendPoints$y = point[!is.na(point)]
DendPoints$site = factor(DendPoints$site,levels(DendPoints$site)[c(3, 10, 4, 2, 12, 8, 11, 9, 5, 7, 6, 1, 13)])
DendPoints$region = factor(DendPoints$region,levels(DendPoints$region)[c(2, 3, 4, 5, 1)])
nColor <- 12
scales::show_col(carto_pal(nColor, "Safe"))
Pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733",
"#332288", "#AA4499", "#44AA99", "#999933",
"#882255", "#661100", "#6699CC", "#888888",
"orange")
DendA = ggplot() +
geom_segment(data = segment(DData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = DendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
# scale_fill_brewer(palette = "Dark2", name = "Site") +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 24, 25), name = "Region")+
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
Dend = DendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
Dend
ggsave("Dend.png", plot = Dend, height = 8, width = 24, units = "in", dpi = 300)
bams = read.csv("../../data/ofav/ofavMetadata.csv")[-c(11,14,22,32:34,54,59,72),] # list of bams files and their populations (tech reps removed)
ma = as.matrix(read.table("../../data/ofav/ofavNoClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(ma) = list(bams[,2],bams[,2])
Hc = hclust(as.dist(ma),"ave")
Pops = bams$region
Site = bams$site
Dend = ma %>% as.dist() %>% hclust(.,"ave") %>% as.dendrogram()
DData = Dend %>% dendro_data()
# Making the branches hang shorter so we can easily see clonal groups
DData$segments$yend2 = DData$segments$yend
for(i in 1:nrow(DData$segments)) {
if (DData$segments$yend2[i] == 0) {
DData$segments$yend2[i] = (DData$segments$y[i] - 0.01)}}
DendPoints = DData$labels
DendPoints$region = Pops[order.dendrogram(Dend)]
DendPoints$site=Site[order.dendrogram(Dend)]
rownames(DendPoints) = DendPoints$label
DendPoints$region = as.factor(DendPoints$region)
DendPoints$site = as.factor(DendPoints$site)
# Making points at the leaves to place symbols for regions
point = as.vector(NA)
for(i in 1:nrow(DData$segments)) {
if (DData$segments$yend[i] == 0) {
point[i] = DData$segments$y[i] - 0.01
} else {
point[i] = NA}}
DendPoints$y = point[!is.na(point)]
DendPoints$site = factor(DendPoints$site,levels(DendPoints$site)[c(3, 10, 4, 2, 12, 8, 11, 9, 5, 7, 6, 1, 13)])
DendPoints$region = factor(DendPoints$region,levels(DendPoints$region)[c(2, 3, 4, 5, 1)])
nColor <- 12
scales::show_col(carto_pal(nColor, "Safe"))
Pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733",
"#332288", "#AA4499", "#44AA99", "#999933",
"#882255", "#661100", "#6699CC", "#888888",
"orange")
DendA = ggplot() +
geom_segment(data = segment(DData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = DendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
# scale_fill_brewer(palette = "Dark2", name = "Site") +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 24, 25), name = "Region")+
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
Dend = DendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
Dend
ggsave("../../figures/ofav/Dend.png", plot = Dend, height = 8, width = 24, units = "in", dpi = 300)
ggsave("../../figures/ofav/Dend.pdf", plot = Dend, height = 8, width = 24, units = "in", dpi = 300)
setwd("~/Library/CloudStorage/GoogleDrive-studivanms@gmail.com/.shortcut-targets-by-id/19m3NwVglpL06Kgwkt5cwhXXyo9OB6b63/Projects/NMFS/Urban stress test/Carbonate Chemistry")
library(tidyverse)
library(seacarb) #install.packages("seacarb")
library(ggplot2)
library(ggpubr)
library(stringr)
library(rcompanion)
incubations <- read.csv("urban carbonate incubations.csv", head=T) # incubation samples for alkalinity anomaly/calcification
incubations$incubation <- as.factor(incubations$incubation)
incubations$site <- factor(incubations$site, levels = c("Emerald", "Rainbow", "Star Island", "MacArthur North"))
incubations$genotype <- as.factor(incubations$genotype)
incubations$species <- as.factor(incubations$species)
incubations$treatment <- as.factor(incubations$treatment)
incubations$initialTA_mol <- incubations$initialTA/1000000 # converting TA umol/kg to mol/kg
incubations$finalTA_mol <- incubations$finalTA/1000000 # converting TA umol/kg to mol/kg
str(incubations)
incubations %>% # running the seacarb function to calculate other parameters from initial pH and TA
mutate(carb(flag=8, initialpH, initialTA_mol, S=salinity, T=temp)) -> incubations_initial_carb
incubations %>% # running the seacarb function to calculate other parameters from final pH and TA
mutate(carb(flag=8, finalpH, finalTA_mol, S=salinity, T=temp)) -> incubations_final_carb
incubations_initial_carb %>% # pulls the initial and final DIC, pCO2, and aragonite saturation columns from the respective dataframes
select(1:32, 41, 48, 50) %>%
rename('initialpCO2'='pCO2','initialDIC'='DIC','initialAr'='OmegaAragonite') %>%
left_join(select(incubations_final_carb, 1, 41, 48, 50), by='bottle') %>%
rename('finalpCO2'='pCO2','finalDIC'='DIC','finalAr'='OmegaAragonite') -> incubations_carb
incubations_carb %>% # calculating net pH, DIC, pCO2, and aragonite saturation
mutate(netDIC = finalDIC - initialDIC) %>%
mutate(netpCO2 = finalpCO2 - initialpCO2) %>%
mutate(netAr = finalAr - initialAr) -> incubations_net_carb
incubations_net_carb %>% # generating summary statistics for net TA
group_by(incubation, site, species, treatment)  %>%
summarise(meanTA = mean(netTA), sdTA = sd(netTA), nTA = n(), seTA = sdTA/sqrt(nTA)) -> incubations_netTA
incubations_net_carb %>% # generating summary statistics for net pH
group_by(incubation, site, species,treatment)  %>%
summarise(meanpH = mean(netpH), sdpH = sd(netpH), npH = n(), sepH = sdpH/sqrt(npH)) -> incubations_netpH
incubations_net_carb %>% # generating summary statistics for net DIC
group_by(incubation, site, species,treatment)  %>%
summarise(meanDIC = mean(netDIC), sdDIC = sd(netDIC), nDIC = n(), seDIC = sdDIC/sqrt(nDIC)) -> incubations_netDIC
incubations_net_carb %>% # generating summary statistics for net pCO2
group_by(incubation, site, species,treatment)  %>%
summarise(meanpCO2 = mean(netpCO2), sdpCO2 = sd(netpCO2), npCO2 = n(), sepCO2 = sdpCO2/sqrt(npCO2)) -> incubations_netpCO2
incubations_net_carb %>% # generating summary statistics for net aragonite saturation state (Omega Aragonite)
group_by(incubation, site, species,treatment)  %>%
summarise(meanAr = mean(netAr), sdAr = sd(netAr), nAr = n(), seAr = sdAr/sqrt(nAr)) -> incubations_netAr
incubations_net_carb %>% # generating summary statistics for net adjusted calcification
group_by(incubation, site, species,treatment)  %>%
summarise(meanCalc = mean(calcificationadj), sdCalc = sd(calcificationadj), nCalc = n(), seCalc = sdCalc/sqrt(nCalc)) -> incubations_netCalc
incubations_netTA %>% # joining all the summary stats into one table
left_join(incubations_netpH, by=c('incubation'='incubation','site'='site','species'='species', 'treatment'='treatment')) %>%
left_join(incubations_netDIC, by=c('incubation'='incubation','site'='site','species'='species', 'treatment'='treatment')) %>%
left_join(incubations_netpCO2, by=c('incubation'='incubation','site'='site','species'='species', 'treatment'='treatment')) %>%
left_join(incubations_netAr, by=c('incubation'='incubation','site'='site','species'='species', 'treatment'='treatment')) %>%
left_join(incubations_netCalc, by=c('incubation'='incubation','site'='site','species'='species', 'treatment'='treatment')) -> incubations_netmeans
incubations_subset <- subset(incubations_net_carb, site!="control") # filtering out skeletal controls
incubations_ofav_day <- incubations_subset[incubations_subset$species == "Ofav" & incubations_subset$incubation == "day",] # filtering dataframe by species and incubation type
incubations_ofav_night <- incubations_subset[incubations_subset$species == "Ofav" & incubations_subset$incubation == "night",]
incubations_ssid_day <- incubations_subset[incubations_subset$species == "Ssid" & incubations_subset$incubation == "day",]
incubations_ssid_night <- incubations_subset[incubations_subset$species == "Ssid" & incubations_subset$incubation == "night",]
# identifying outliers
outliers_ofav_day <- boxplot(incubations_ofav_day$calcificationadj, plot=T)$out # no outliers
outliers_ofav_night <- boxplot(incubations_ofav_night$calcificationadj, plot=T)$out # 2 outliers
incubations_ofav_night <- incubations_ofav_night[-which(incubations_ofav_night$calcificationadj %in% outliers_ofav_night),] # outlier removal
outliers_ssid_day <- boxplot(incubations_ssid_day$calcificationadj, plot=T)$out # no outliers
outliers_ssid_night <- boxplot(incubations_ssid_night$calcificationadj, plot=T)$out # 2 outliers
incubations_ssid_night <- incubations_ssid_night[-which(incubations_ssid_night$calcificationadj %in% outliers_ssid_night),]
# Shapiro test, p-values below 0.05 indicate violations of normality assumptions
shapiro.test(incubations_ofav_day$calcificationadj) # normal
shapiro.test(incubations_ofav_night$calcificationadj) # normal
anova_ofav_day <- aov(calcificationadj ~ treatment*site+site/genotype, data=incubations_ofav_day)
summary(anova_ofav_day) # no factors significant, genotype marginal
anova_ofav_night <- aov(calcificationadj ~ treatment*site+site/genotype, data=incubations_ofav_night)
summary(anova_ofav_night) # treatment marginal
anova_ssid_day <- aov(calcificationadj ~ treatment*site+site/genotype, data=incubations_ssid_day)
summary(anova_ssid_day) # treatment and site significant
anova_ssid_night <- aov(calcificationadj ~ treatment*site+site/genotype, data=incubations_ssid_night)
summary(anova_ssid_night) # treatment and site significant
tukey_ssid_day <- TukeyHSD(anova_ssid_day) # pairwise comparisons
tukey_ssid_day$`treatment:site`
tukey_ssid_night <- TukeyHSD(anova_ssid_night) # pairwise comparisons
tukey_ssid_night$`treatment:site`
incubations_net_carb %>% # generating mean adjusted calcification per sample (average day/night)
group_by(sampleID, site, species,treatment,genotype)  %>%
summarise(calcificationavg = mean(calcificationadj)) -> incubations_meanCalc
incubations_meanCalc
incubations_meanCalc %>% # generating summary statistics for average adjusted calcification
group_by(site, species,treatment)  %>%
summarise(meanCalc = mean(calcificationavg), sdCalc = sd(calcificationavg), nCalc = n(), seCalc = sdCalc/sqrt(nCalc)) -> incubations_mean_netCalc
incubations_mean_netCalc
View(incubations_meanCalc)
write.csv(incubations_meanCalc, file = "urban carbonate incubations daynight calcification.csv")
incubations_meanCalc %>% # generating summary statistics for average adjusted calcification
group_by(site, species,treatment)  %>%
summarise(meanCalc = mean(calcificationavg), sdCalc = sd(calcificationavg), nCalc = n(), seCalc = sdCalc/sqrt(nCalc)) -> incubations_mean_netCalc
write.csv(incubations_mean_netCalc, file = "urban carbonate incubations daynight calcification means.csv")
setwd("~/Documents/GitHub/Urban-coral-population-genetics/code/dlab")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
# install.packages("rcartocolor")
library(rcartocolor)
pacman::p_load("dendextend", "ggdendro", "tidyverse")
cloneBams = read.csv("../../data/dlab/dlabMetadata.csv") # list of bam files
cloneMa = as.matrix(read.table("../../data/dlab/dlabClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(cloneMa) = list(cloneBams[,2],cloneBams[,2])
clonesHc = hclust(as.dist(cloneMa),"ave")
clonePops = cloneBams$region
cloneSite = cloneBams$site
cloneDend = cloneMa %>% as.dist() %>% hclust(.,"ave") %>% as.dendrogram()
cloneDData = cloneDend %>% dendro_data()
# Making the branches hang shorter so we can easily see clonal groups
cloneDData$segments$yend2 = cloneDData$segments$yend
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend2[i] == 0) {
cloneDData$segments$yend2[i] = (cloneDData$segments$y[i] - 0.01)}}
cloneDendPoints = cloneDData$labels
cloneDendPoints$region = clonePops[order.dendrogram(cloneDend)]
cloneDendPoints$site=cloneSite[order.dendrogram(cloneDend)]
rownames(cloneDendPoints) = cloneDendPoints$label
cloneDendPoints$region = as.factor(cloneDendPoints$region)
cloneDendPoints$site = as.factor(cloneDendPoints$site)
# Making points at the leaves to place symbols for regions
point = as.vector(NA)
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend[i] == 0) {
point[i] = cloneDData$segments$y[i] - 0.01
} else {
point[i] = NA}}
cloneDendPoints$y = point[!is.na(point)]
techReps = c("urban_226", "urban_226_2", "urban_226_3", "urban_333", "urban_333_2", "urban_355", "urban_355_2", "urban_355_3", "urban_650", "urban_650_2", "urban_650_3")
cloneDendPoints$site
cloneDendPoints$site = factor(cloneDendPoints$site,levels(cloneDendPoints$site)[c(3, 10, 4, 2, 12, 8, 11, 9, 5, 7, 6, 1, 13)])
cloneDendPoints$site
cloneDendPoints$site
cloneBams = read.csv("../../data/dlab/dlabMetadata.csv") # list of bam files
cloneMa = as.matrix(read.table("../../data/dlab/dlabClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(cloneMa) = list(cloneBams[,2],cloneBams[,2])
clonesHc = hclust(as.dist(cloneMa),"ave")
clonePops = cloneBams$region
cloneSite = cloneBams$site
cloneDend = cloneMa %>% as.dist() %>% hclust(.,"ave") %>% as.dendrogram()
cloneDData = cloneDend %>% dendro_data()
# Making the branches hang shorter so we can easily see clonal groups
cloneDData$segments$yend2 = cloneDData$segments$yend
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend2[i] == 0) {
cloneDData$segments$yend2[i] = (cloneDData$segments$y[i] - 0.01)}}
cloneDendPoints = cloneDData$labels
cloneDendPoints$region = clonePops[order.dendrogram(cloneDend)]
cloneDendPoints$site=cloneSite[order.dendrogram(cloneDend)]
rownames(cloneDendPoints) = cloneDendPoints$label
cloneDendPoints$region = as.factor(cloneDendPoints$region)
cloneDendPoints$site = as.factor(cloneDendPoints$site)
# Making points at the leaves to place symbols for regions
point = as.vector(NA)
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend[i] == 0) {
point[i] = cloneDData$segments$y[i] - 0.01
} else {
point[i] = NA}}
cloneDendPoints$y = point[!is.na(point)]
techReps = c("urban_226", "urban_226_2", "urban_226_3", "urban_333", "urban_333_2", "urban_355", "urban_355_2", "urban_355_3", "urban_650", "urban_650_2", "urban_650_3")
cloneDendPoints$site
cloneDendPoints$site = factor(cloneDendPoints$site,levels(cloneDendPoints$site)[c(3, 10, 4, 2, 7, 6, 1, 9, 5, 8)])
cloneDendPoints$site
cloneDendPoints$region
cloneDendPoints$region = factor(cloneDendPoints$region,levels(cloneDendPoints$region)[c(2, 3, 4, 1, 5)])
cloneDendPoints$region
nColor <- 10
scales::show_col(carto_pal(nColor, "Safe"))
Pal <- c("#E69F00", "#009E73", "#E41A1C", "#4DAF4A", "#999999", "#66C2A5", "#FF7F00", "#F781BF", "#FC8D62", "#FFD92F", "#A6D854")
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
# scale_fill_brewer(palette = "Dark2", name = "Site") +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 24, 25), name = "Region")+
geom_hline(yintercept = 0.12, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .045), label = label), angle = 90) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .025), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 25, 12), name = "Region")+
geom_hline(yintercept = 0.12, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .045), label = label), angle = 90) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .025), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 25, 8), name = "Region")+
geom_hline(yintercept = 0.12, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .045), label = label), angle = 90) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .025), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.background  = element_rect(fill = "white", colour = NA),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
cloneDend
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 25, 8), name = "Region")+
geom_hline(yintercept = 0.15, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .045), label = label), angle = 90) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .025), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.background  = element_rect(fill = "white", colour = NA),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 25, 8), name = "Region")+
geom_hline(yintercept = 0.14, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .045), label = label), angle = 90) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .025), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.background  = element_rect(fill = "white", colour = NA),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
View(cloneMa)
View(cloneDData)
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = site, shape = region), size = 4, stroke = 0.25) +
scale_fill_manual(values = Pal, name= "Site")+
scale_shape_manual(values = c(21, 22, 23, 25, 8), name = "Region")+
geom_hline(yintercept = 0.145, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .045), label = label), angle = 90) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .025), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22)))+
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black", angle = 90),
axis.text.y = element_text(size = 10, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.background  = element_rect(fill = "white", colour = NA),
legend.key = element_blank(),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "bottom")
cloneDend
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
ggsave("../../figures/dlab/cloneDend.pdf", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
ggsave("../../figures/dlab/cloneDend.pdf", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
ggsave("../../figures/dlab/cloneDend.png", plot = cloneDend, height = 8, width = 24, units = "in", dpi = 300)
