setwd("~/Documents/GitHub/Urban-coral-population-genetics/symbionts")
library(tidyverse) # install.packages('tidyverse')
#library(devtools)  # install.packages("devtools")
#devtools::install_github("jrcunning/steponeR")
#install.packages("rlang")
library(steponeR)
library(devtools)
install.packages("devtools")
devtools::install_github("jrcunning/steponeR")
#library(devtools)  # install.packages("devtools")
#devtools::install_github("jrcunning/steponeR")
#install.packages("rlang")
library(steponeR)
library(plyr)
library(reshape2)
library(ggplot2)
# Get the list of files with qPCR data
Plates <- list.files(path="data", pattern=".csv", full.names=T)
Plates
Urban.Out <- steponeR(files=Plates, target.ratios=c("A.D", "B.D", "C.D"),
fluor.norm=list(A=0, B=0, C=0, D=0),
copy.number=list(A=1, B=1, C=1, D=1), # look up copy numbers
ploidy=list(A=1, B=1, C=1, D=1),
extract=list(A=0.813, B=0.813, C= 0.813, D=0.813))
# Target ratio results
Urban<-Urban.Out$result
# Target ratio results
Urban<-Urban.Out$result
# 3. Data CLEANING A
```{r DataCleaning}
# 1. Check and remove NTC wells
ntc <- Urban[which(Urban$Sample.Name=="NTC"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ntc), ])
# 2. Check and remove + Control wells
Positive <- Urban[which(Urban$Sample.Name=="+"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(Positive), ])
# 3.If Clade only detected in one technical replicate, set its ratio to NA and make them =0
One.A<- Urban[which(Urban$A.reps==1),]
Urban$A.D[which(Urban$A.reps==1)] <- NA
One.B<- Urban[which(Urban$B.reps==1),]
Urban$B.D[which(Urban$B.reps==1)] <- NA
One.C<- Urban[which(Urban$C.reps==1),]
Urban$C.D[which(Urban$C.reps==1)] <- NA
One.D<- Urban[which(Urban$D.reps==1),]
Urban$A.D[which(Urban$D.reps==1)] <- NA
Urban$B.D[which(Urban$D.reps==1)] <- NA
Urban$C.D[which(Urban$D.reps==1)] <- NA
Urban$A.D[is.na(Urban$A.D)] <- 0
Urban$B.D[is.na(Urban$B.D)] <- 0
Urban$C.D[is.na(Urban$C.D)] <- 0
#4. Get the total S/H cell ratios and log 10 transformations
```{r}
# Total SH
Urban$TotalSH<-(Urban$A.D + Urban$B.D+ Urban$C.D)
setwd("/Users/michael.studivan/Downloads")
Plates <- list.files(path="qPCR", pattern=".csv", full.names=T)
Plates
Pseudo.Out <- steponeR(files=Plates, target.ratios=c("A.Pseudo", "B.Pseudo", "C.Pseudo"),
fluor.norm=list(A=0, B=0, C=0, Pseudo=0),#takes care of fluoresence normalization - designed for tag (probe) chemistry rather than syber - so they are zero here
copy.number=list(A=1, B=1, C=1, Pseudo=1), #need to do a lit review to see what the copy numbers are for the host and symbiont
ploidy=list(A=1, B=1, C=1, Pseudo=2), #corals have diploid cells, but algal symbionts do not, so these will always stay the same
extract=list(A=0.813, B=0.813, C=0.813, Pseudo=0.982)) #easier to get all the coral dna (only coral cen membrane) but harder to get the symbiont dna (need to penetrate coral cell membrane, symbiont wall, and symbiont membrane)
View(Urban)
# 3. Create unique sample ID+FileName to relabel samples
Urban$Sample.Plate<-paste(Urban$Sample.Name, Urban$File.Name, sep = "_" )
# Get the list of files with qPCR data
Plates <- list.files(path="data", pattern=".csv", full.names=T)
setwd("~/Documents/GitHub/Urban-coral-population-genetics/symbionts")
# Get the list of files with qPCR data
Plates <- list.files(path="data", pattern=".csv", full.names=T)
Plates
Urban.Out <- steponeR(files=Plates, target.ratios=c("A.D", "B.D", "C.D"),
fluor.norm=list(A=0, B=0, C=0, D=0),
copy.number=list(A=1, B=1, C=1, D=1), # look up copy numbers
ploidy=list(A=1, B=1, C=1, D=1),
extract=list(A=0.813, B=0.813, C= 0.813, D=0.813))
# Target ratio results
Urban<-Urban.Out$result
# Target ratio results
Urban<-Urban.Out$result
ntc <- Urban[which(Urban$Sample.Name=="NTC"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ntc), ])
# 2. Check and remove + Control wells
Positive <- Urban[which(Urban$Sample.Name=="+"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(Positive), ])
# 3.If Clade only detected in one technical replicate, set its ratio to NA and make them =0
One.A<- Urban[which(Urban$A.reps==1),]
Urban$A.D[which(Urban$A.reps==1)] <- NA
One.B<- Urban[which(Urban$B.reps==1),]
Urban$B.D[which(Urban$B.reps==1)] <- NA
One.C<- Urban[which(Urban$C.reps==1),]
Urban$C.D[which(Urban$C.reps==1)] <- NA
One.D<- Urban[which(Urban$D.reps==1),]
Urban$A.D[which(Urban$D.reps==1)] <- NA
Urban$B.D[which(Urban$D.reps==1)] <- NA
Urban$C.D[which(Urban$D.reps==1)] <- NA
Urban$A.D[is.na(Urban$A.D)] <- 0
Urban$B.D[is.na(Urban$B.D)] <- 0
Urban$C.D[is.na(Urban$C.D)] <- 0
Urban$TotalSH<-(Urban$A.D + Urban$B.D+ Urban$C.D)
# Log 10
Urban$logA.SH <- log10(Urban$A.D)
Urban$logB.SH <- log10(Urban$B.D)
Urban$logC.SH <- log10(Urban$C.D)
Urban$logSH<-log10(Urban$TotalSH)
Urban$logA.SH[which(Urban$A.D==0)] <- NA
Urban$logB.SH[which(Urban$B.D==0)] <- NA
Urban$logC.SH[which(Urban$C.D==0)] <- NA
# 3. Create unique sample ID+FileName to relabel samples
Urban$Sample.Plate<-paste(Urban$Sample.Name, Urban$File.Name, sep = "_" )
head(SampleName)
head(Urban)
head(SampleName)
View(Urban)
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$Urban.reps==1), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ReRun.Coral), ])
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
# 7. High ST
StDe1.5 <- Urban[which((Urban$Urban.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(StDe1.5), ])
LateCoral<-Urban[which(Urban$Urban.CT.mean>22), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(LateCoral), ])
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
# Get the sample metadata (treatments, data points, etc)
Metadata<-read.csv("metadata.csv")
# Get treatment information
Urban<-left_join(Urban, Metadata, by="ID")
# Get treatment information
Urban<-left_join(Urban, Metadata, by="Sample.Plate")
View(Metadata)
# Get treatment information
Urban<-inner_join(Urban, Metadata, by="Sample.Plate")
# Get treatment information
Urban<-right_join(Urban, Metadata, by="Sample.Plate")
# Get treatment information
Urban<-left_join(Urban, Metadata, by="Sample.Plate")
# Target ratio results
Urban<-Urban.Out$result
ntc <- Urban[which(Urban$Sample.Name=="NTC"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ntc), ])
# 2. Check and remove + Control wells
Positive <- Urban[which(Urban$Sample.Name=="+"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(Positive), ])
# 3.If Clade only detected in one technical replicate, set its ratio to NA and make them =0
One.A<- Urban[which(Urban$A.reps==1),]
Urban$A.D[which(Urban$A.reps==1)] <- NA
One.B<- Urban[which(Urban$B.reps==1),]
Urban$B.D[which(Urban$B.reps==1)] <- NA
One.C<- Urban[which(Urban$C.reps==1),]
Urban$C.D[which(Urban$C.reps==1)] <- NA
One.D<- Urban[which(Urban$D.reps==1),]
Urban$A.D[which(Urban$D.reps==1)] <- NA
Urban$B.D[which(Urban$D.reps==1)] <- NA
Urban$C.D[which(Urban$D.reps==1)] <- NA
Urban$A.D[is.na(Urban$A.D)] <- 0
Urban$B.D[is.na(Urban$B.D)] <- 0
Urban$C.D[is.na(Urban$C.D)] <- 0
```
# 3. Create unique sample ID+FileName to relabel samples
Urban$Sample.Plate<-paste(Urban$Sample.Name, Urban$File.Name, sep = "_" )
# Get treatment information
Urban2<-left_join(Urban, Metadata, by="Sample.Plate")
View(Urban2)
# Get treatment information
Urban2<-inner_join(Urban, Metadata, by="Sample.Plate")
View(Urban2)
# Get treatment information
Urban2<-outer_join(Urban, Metadata, by="Sample.Plate")
# Get treatment information
Urban2<-right_join(Urban, Metadata, by="Sample.Plate")
# Get treatment information
Urban2<-left_join(Urban, Metadata, by="Sample.Plate")
# Get the sample metadata (treatments, data points, etc)
Metadata<-read.csv("metadata.csv")
# Get treatment information
Urban2<-left_join(Urban, Metadata, by="Sample.Plate")
# Get treatment information
Urban<-left_join(Urban, Metadata, by="Sample.Plate")
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$Urban.reps==1), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ReRun.Coral), ])
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
# 7. High ST
StDe1.5 <- Urban[which((Urban$Urban.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(StDe1.5), ])
LateCoral<-Urban[which(Urban$Urban.CT.mean>22), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(LateCoral), ])
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$Urban.reps==1), ]
Urban<-Urban.Out$result
```
# Get the sample metadata (treatments, data points, etc)
Metadata<-read.csv("metadata.csv")
# 3. Create unique sample ID+FileName to relabel samples
Urban$Sample.Plate<-paste(Urban$Sample.Name, Urban$File.Name, sep = "_" )
head(SampleName)
head(Urban)
# Get treatment information
Urban<-left_join(Urban, Metadata, by="Sample.Plate")
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$Urban.reps==1), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ReRun.Coral), ])
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
# 7. High ST
StDe1.5 <- Urban[which((Urban$Urban.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(StDe1.5), ])
LateCoral<-Urban[which(Urban$Urban.CT.mean>22), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(LateCoral), ])
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
Plates <- list.files(path="data", pattern=".csv", full.names=T)
Plates
Urban.Out <- steponeR(files=Plates, target.ratios=c("A.D", "B.D", "C.D"),
fluor.norm=list(A=0, B=0, C=0, D=0),
copy.number=list(A=1, B=1, C=1, D=1), # look up copy numbers
ploidy=list(A=1, B=1, C=1, D=1),
extract=list(A=0.813, B=0.813, C= 0.813, D=0.813))
# Target ratio results
Urban<-Urban.Out$result
ntc <- Urban[which(Urban$Sample.Name=="NTC"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ntc), ])
# 2. Check and remove + Control wells
Positive <- Urban[which(Urban$Sample.Name=="+"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(Positive), ])
One.A<- Urban[which(Urban$A.reps==1),]
Urban$A.D[which(Urban$A.reps==1)] <- NA
One.B<- Urban[which(Urban$B.reps==1),]
Urban$B.D[which(Urban$B.reps==1)] <- NA
One.C<- Urban[which(Urban$C.reps==1),]
Urban$C.D[which(Urban$C.reps==1)] <- NA
One.D<- Urban[which(Urban$D.reps==1),]
Urban$A.D[which(Urban$D.reps==1)] <- NA
Urban$B.D[which(Urban$D.reps==1)] <- NA
Urban$C.D[which(Urban$D.reps==1)] <- NA
Urban$A.D[is.na(Urban$A.D)] <- 0
Urban$B.D[is.na(Urban$B.D)] <- 0
Urban$C.D[is.na(Urban$C.D)] <- 0
# Total SH
Urban$TotalSH<-(Urban$A.D + Urban$B.D+ Urban$C.D)
Urban$logA.SH <- log10(Urban$A.D)
Urban$logB.SH <- log10(Urban$B.D)
Urban$logC.SH <- log10(Urban$C.D)
Urban$logSH<-log10(Urban$TotalSH)
Urban$logA.SH[which(Urban$A.D==0)] <- NA
Urban$logB.SH[which(Urban$B.D==0)] <- NA
Urban$logC.SH[which(Urban$C.D==0)] <- NA
# Get the sample metadata (treatments, data points, etc)
Metadata<-read.csv("metadata.csv")
# 3. Create unique sample ID+FileName to relabel samples
Urban$Sample.Plate<-paste(Urban$Sample.Name, Urban$File.Name, sep = "_" )
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$Urban.reps==1), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ReRun.Coral), ])
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
# 7. High ST
StDe1.5 <- Urban[which((Urban$Urban.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(StDe1.5), ])
LateCoral<-Urban[which(Urban$Urban.CT.mean>22), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(LateCoral), ])
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
View(Urban)
View(Urban)
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$Urban.reps==1), ]
# Get treatment information
Urban<-left_join(Urban, Metadata, by="Sample.Plate")
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$A.reps==1 & Urban$B.reps==1 & Urban$C.reps==1 & Urban$D.reps==1), ]
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
# 7. High ST
StDe1.5 <- Urban[which((Urban$A.CT.sd>1.5)|(Urban$B.CT.sd>1.5)|(Urban$C.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(StDe1.5), ])
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
View(NoHSratio)
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$A.reps==1 | Urban$B.reps==1 | Urban$C.reps==1 | Urban$D.reps==1), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ReRun.Coral), ])
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(NoHSratio), ])
# 7. High ST
StDe1.5 <- Urban[which((Urban$A.CT.sd>1.5)|(Urban$B.CT.sd>1.5)|(Urban$C.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(StDe1.5), ])
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
View(ReRun.Coral)
View(Urban)
# Get the list of files with qPCR data
Plates <- list.files(path="data", pattern=".csv", full.names=T)
Plates
Urban.Out <- steponeR(files=Plates, target.ratios=c("A.D", "B.D", "C.D"),
fluor.norm=list(A=0, B=0, C=0, D=0),
copy.number=list(A=1, B=1, C=1, D=1), # look up copy numbers
ploidy=list(A=1, B=1, C=1, D=1),
extract=list(A=0.813, B=0.813, C= 0.813, D=0.813))
# Target ratio results
Urban<-Urban.Out$result
ntc <- Urban[which(Urban$Sample.Name=="NTC"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(ntc), ])
# 2. Check and remove + Control wells
Positive <- Urban[which(Urban$Sample.Name=="+"), ]
Urban <- droplevels(Urban[!rownames(Urban) %in% rownames(Positive), ])
# 3.If Clade only detected in one technical replicate, set its ratio to NA and make them =0
One.A<- Urban[which(Urban$A.reps==1),]
Urban$A.D[which(Urban$A.reps==1)] <- NA
One.B<- Urban[which(Urban$B.reps==1),]
Urban$B.D[which(Urban$B.reps==1)] <- NA
One.C<- Urban[which(Urban$C.reps==1),]
Urban$C.D[which(Urban$C.reps==1)] <- NA
One.D<- Urban[which(Urban$D.reps==1),]
Urban$A.D[which(Urban$D.reps==1)] <- NA
Urban$B.D[which(Urban$D.reps==1)] <- NA
Urban$C.D[which(Urban$D.reps==1)] <- NA
Urban$A.D[is.na(Urban$A.D)] <- 0
Urban$B.D[is.na(Urban$B.D)] <- 0
Urban$C.D[is.na(Urban$C.D)] <- 0
# Total SH
Urban$TotalSH<-(Urban$A.D + Urban$B.D+ Urban$C.D)
Urban$logA.SH <- log10(Urban$A.D)
Urban$logB.SH <- log10(Urban$B.D)
Urban$logC.SH <- log10(Urban$C.D)
Urban$logSH<-log10(Urban$TotalSH)
Urban$logA.SH[which(Urban$A.D==0)] <- NA
Urban$logB.SH[which(Urban$B.D==0)] <- NA
Urban$logC.SH[which(Urban$C.D==0)] <- NA
# Get the sample metadata (treatments, data points, etc)
Metadata<-read.csv("metadata.csv")
# 3. Create unique sample ID+FileName to relabel samples
Urban$Sample.Plate<-paste(Urban$Sample.Name, Urban$File.Name, sep = "_" )
# Get treatment information
Urban<-left_join(Urban, Metadata, by="Sample.Plate")
# 6.If coral detected in one technical replicate, remove the sample
ReRun.Coral <- Urban[which(Urban$A.reps==1 | Urban$B.reps==1 | Urban$C.reps==1 | Urban$D.reps==1), ]
View(ReRun.Coral)
NoHSratio <- Urban[which(Urban$TotalSH==0), ]
View(NoHSratio)
# 7. High ST
StDe1.5 <- Urban[which((Urban$A.CT.sd>1.5)|(Urban$B.CT.sd>1.5)|(Urban$C.CT.sd>1.5)|(Urban$D.CT.sd>1.5)), ]
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio)
ToRe_Run1<-rbind(ToRe_Run1, ReRun.Coral)
ToRe_Run1<-rbind(ToRe_Run1, StDe1.5)
ToRe_Run1<-rbind(ToRe_Run1, LateCoral)
ToRe_Run1<-ToRe_Run1 %>% distinct()
# Samples to Re-run
ToRe_Run1<-rbind(ReRun.Coral, NoHSratio, StDe1.5)
ToRe_Run1<-ToRe_Run1 %>% distinct()
# Samples to Re-run
ToRe_Run1<-rbind(NoHSratio, StDe1.5)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
View(Urban)
View(ToRe_Run1)
# Samples to Re-run
ToRe_Run1<-rbind(NoHSratio, StDe1.5)
ToRe_Run1<-ToRe_Run1 %>% distinct()
View(ToRe_Run1)
